---
# CloudFormation script
# This script deploys two EC2 Linux instances, one in a public subnet and the other in a private subnet.

AWSTemplateFormatVersion:        "2010-09-09"
Description:                     Deploy EC2 instances in public and private subnets of existing non-default VPC

# Metadata:
#   template metadata
#
Parameters:

  OwnerParameter:
    Type:                        String
    Default:                     Your Name

  EnvironmentParameter:
    Type:                        String
    Default:                     dev
    AllowedValues:
    - dev
    - prod
    - test

  VpcStackNameParameter:
    Type:                        String
    Default:                     dev-vpc-stack

  # Future Use
  EFSStackNameParameter:
    Type:                        String
    Default:                     dev-efs-stack

  # MUST provide parameter override
  EFSWebFileShareParameter:
    Type:                        String
    Default:                     fs-000000

  KeyNameParameter:
    Description:                 Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type:                        AWS::EC2::KeyPair::KeyName
    ConstraintDescription:       Must be the name of an existing EC2 KeyPair.

  InstanceTypeParameter:
    Description:                 WebServer EC2 instance type
    Type:                        String
    Default:                     t3.micro
    AllowedValues:               [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription:       Must be a valid EC2 instance type.

  SSHLocationParameter:
    Description:                 The IP address range that can be used to SSH to the EC2 instances
    Type:                        String
    MinLength:                   9
    MaxLength:                   18
    Default:                     0.0.0.0/0
    AllowedPattern:              (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription:       Must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiIdParameter:
    Type:                        String
    Default:                     'ami-00beae93a2d981137'





# Rules:
#   set of rules
#
# Mappings:
#   set of mappings
#
# Conditions:
#   set of conditions
#
# Transform:
#   set of transforms

Resources:

  EC2Role:
    Type:                        "AWS::IAM::Role"
    Properties:
      Description:               EC2 Role
      RoleName:                  !Join ['-',[!Ref "AWS::StackName", EC2, Role]]
      AssumeRolePolicyDocument:
        Version:                 "2012-10-17"
        Statement:
          - Effect:              "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key:                   Environment
          Value:                 !Ref EnvironmentParameter


  RolePolicies:
    Type:                        "AWS::IAM::Policy"
    Properties:
      PolicyName:                "EC2-Policy"
      PolicyDocument:
        Version:                 "2012-10-17"
        Statement:
          - Effect:              "Allow"
            Action:              "*"
            Resource:            "*"
      Roles:
        - !Ref EC2Role



  LinuxServerInstanceProfile:
    Type:                        AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:       !Join ['-', [!Ref EnvironmentParameter, LinuxServerInstanceProfile]]
      Roles:
        - !Ref EC2Role



  WebLayerSecurityGroup:
      Type:                      AWS::EC2::SecurityGroup
      Properties:
        GroupDescription:        Allow tcp traffic on port 80
        GroupName:               Port80AllTraffic
        VpcId:
          Fn::ImportValue:       !Sub "${VpcStackNameParameter}-VPCID"
        SecurityGroupIngress:
          - IpProtocol:          tcp
            FromPort:            80
            ToPort:              80
            CidrIp:              0.0.0.0/0
          - IpProtocol:          tcp
            FromPort:            443
            ToPort:              443
            CidrIp:              0.0.0.0/0
          - IpProtocol:          icmp
            FromPort:            8
            ToPort:              -1
            CidrIp:              0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol:          -1
            CidrIp:              0.0.0.0/0
        Tags:
          - Key:                 Environment
            Value:               !Ref EnvironmentParameter
          - Key:                 Name
            Value:               !Join ['-', [!Ref "AWS::StackName", WebLayer, Port80]]



  # Web Server(s)
  LinuxServer1:
    Type:                        AWS::EC2::Instance
    Properties:
      InstanceType:              !Ref InstanceTypeParameter
      SecurityGroupIds:
        - Fn::ImportValue:       !Sub "${VpcStackNameParameter}-DefaultSecurityGroup"
        - !Ref WebLayerSecurityGroup
      KeyName:                   !Ref KeyNameParameter
      ImageId:                   !Ref LatestAmiIdParameter
      SubnetId:
        Fn::ImportValue:         !Sub "${VpcStackNameParameter}-PublicSubnet1"
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          dnf update -y
          dnf upgrade -y --releasever=2023.5.20240624
          dnf install -y php
          dnf install -y httpd

          mkdir /webshare
          mkdir /webshare/www
          mkdir /webshare/www/html
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFSWebFileShareParameter}.efs.${AWS::Region}.amazonaws.com:/ /webshare/www/html
          sed -i "s,/var/www/html,/webshare/www/html,g" /etc/httpd/conf/httpd.conf
          systemctl start httpd
          systemctl enable httpd
          # dnf install -y mod_ssl
          # cd /etc/pki/tls/certs
          # ./make-dummy-cert localhost.crt
          # cd
          # sed -e '/SSLCertificateKeyFile/s/^/#/g' -i /etc/httpd/conf.d/ssl.conf
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /webshare/www/html
          chmod 2775 /webshare/www/html
          find /webshare/www/html -type d -exec chmod 2775 {} \;
          find /webshare/www/html -type f -exec chmod 0664 {} \;
          if [ ! -f /webshare/www/html/phpinfo.php ]; then
            echo "<?php phpinfo(); ?>" > /webshare/www/html/phpinfo.php
          fi

          # Install PHPMyAdmin
          #cd /webshare/www/html
          #wget https://files.phpmyadmin.net/phpMyAdmin/5.1.1/phpMyAdmin-5.1.1-english.tar.gz
          #mkdir phpMyAdmin && tar -xvzf phpMyAdmin-5.1.1-english.tar.gz -C phpMyAdmin --strip-components 1
          #rm phpMyAdmin-5.1.1-english.tar.gz
          #systemctl restart httpd
          #systemctl restart php-fpm

      Tags:
        - Key:                   Environment
          Value:                 !Ref EnvironmentParameter
        - Key:                   Group
          Value:                 Web
        - Key:                   Name
          Value:                 !Join ['-', [!Ref EnvironmentParameter, LinuxWebServer1]]

  LinuxServer2:
    Type:                        AWS::EC2::Instance
    Properties:
      InstanceType:              !Ref InstanceTypeParameter
      SecurityGroupIds:
        - Fn::ImportValue:       !Sub "${VpcStackNameParameter}-DefaultSecurityGroup"
        - !Ref WebLayerSecurityGroup
      KeyName:                   !Ref KeyNameParameter
      ImageId:                   !Ref LatestAmiIdParameter
      SubnetId:
        Fn::ImportValue:         !Sub "${VpcStackNameParameter}-PublicSubnet2"
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          dnf update -y
          dnf upgrade -y --releasever=2023.5.20240624
          dnf install -y php
          dnf install -y httpd

          mkdir /webshare
          mkdir /webshare/www
          mkdir /webshare/www/html
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFSWebFileShareParameter}.efs.${AWS::Region}.amazonaws.com:/ /webshare/www/html
          sed -i "s,/var/www/html,/webshare/www/html,g" /etc/httpd/conf/httpd.conf
          systemctl start httpd
          systemctl enable httpd
          # dnf install -y mod_ssl
          # cd /etc/pki/tls/certs
          # ./make-dummy-cert localhost.crt
          # cd
          # sed -e '/SSLCertificateKeyFile/s/^/#/g' -i /etc/httpd/conf.d/ssl.conf
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /webshare/www/html
          chmod 2775 /webshare/www/html
          find /webshare/www/html -type d -exec chmod 2775 {} \;
          find /webshare/www/html -type f -exec chmod 0664 {} \;
          if [ ! -f /webshare/www/html/phpinfo.php ]; then
            echo "<?php phpinfo(); ?>" > /webshare/www/html/phpinfo.php
          fi

          #systemctl restart httpd

          

      Tags:
        - Key:                   Environment
          Value:                 !Ref EnvironmentParameter
        - Key:                   Group
          Value:                 Web
        - Key:                   Name
          Value:                 !Join ['-', [!Ref EnvironmentParameter, LinuxWebServer2]]



Outputs:
  LinuxServerOneId:
    Description:                 InstanceId of the newly created EC2 instance
    Value:                       !Ref LinuxServer1
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerOne]]
  LinuxServerTwoId:
    Description:                 InstanceId of the newly created EC2 instance
    Value:                       !Ref LinuxServer2
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerTwo]]
  LinuxServerOneAZ:
    Description:                 Availability Zone of the newly created EC2 instance
    Value:                       !GetAtt [LinuxServer1, AvailabilityZone]
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerOneAZ]]
  LinuxServerTwoAZ:
    Description:                 Availability Zone of the newly created EC2 instance
    Value:                       !GetAtt [LinuxServer2, AvailabilityZone]
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerTwoAZ]]
  LinuxServerOnePublicDNS:
    Description:                 Public DNSName of the newly created EC2 instance
    Value:                       !GetAtt [LinuxServer1, PublicDnsName]
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerOnePublicDNS]]
  LinuxServerTwoPublicDNS:
    Description:                 Public DNSName of the newly created EC2 instance
    Value:                       !GetAtt [LinuxServer2, PublicDnsName]
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerTwoPublicDNS]]
  LinuxServerOnePublicIP:
    Description:                 Public IP address of the newly created EC2 instance
    Value:                       !GetAtt [LinuxServer1, PublicIp]
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerOnePublicIP]]
  LinuxServerTwoPublicIP:
    Description:                 Public IP address of the newly created EC2 instance
    Value:                       !GetAtt [LinuxServer2, PublicIp]
    Export:
      Name:                      !Join ['-', [!Ref "AWS::StackName", LinuxServerTwoPublicIP]]
